name: CI

on:
  push:
    branches: [ github-actions ]  # Runs the workflow on push commits to the 'github-actions' branch
  pull_request:
    branches: [ github-actions ]  # Runs the workflow on pull requests to the 'github-actions' branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Defines the virtual machine where the job will run


    steps:
    - uses: actions/checkout@v2  # Checks out the repository's source code
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'  # Specifies the Python version to use

    - name: Create .env file
      run: | 
          echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> .env
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> .env

    - name: Build Docker image
      run: docker-compose -f docker-compose.yml build  # Builds the Docker image using docker-compose

    - name: Run Docker containers
      run: docker-compose -f docker-compose.yml up -d  # Starts the containers in detached mode

    - name: Check running containers
      run: docker-compose ps  # Lists the running containers for verification

    - name: Wait for services to start
      run: sleep 30  # Waits a few seconds to ensure services are fully started

    - name: Test MongoDB connection
      run: |
        docker exec mongodb_container mongo --eval 'db.runCommand({ connectionStatus: 1 })' -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD}
      # Tests the connection to MongoDB using docker exec to run the command inside the MongoDB container

    - name: Test application endpoint
      run: |
        curl -f http://localhost:8000/  # Tests if the application endpoint is accessible
      # Uses curl to access the application and check if it's responding correctly

    - name: Shutdown
      run: docker-compose down  # Shuts down the containers and cleans up the environment after tests
